"  ------------------------------------------------------------
" *  @file       vimrc.bundles
" *  @date       2014
" *  @author     Jim Zhan <jim.zhan@me.com>
" *
" Copyright Â© 2014 Jim Zhan.
" ------------------------------------------------------------
" Licensed under the Apache License, Version 2.0 (the "License");
" you may not use this file except in compliance with the License.
" You may obtain a copy of the License at
"
"     http://www.apache.org/licenses/LICENSE-2.0
"
" Unless required by applicable law or agreed to in writing, software
" distributed under the License is distributed on an "AS IS" BASIS,
" WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
" See the License for the specific language governing permissions and
" limitations under the License.
" ------------------------------------------------------------

" ---------------------------------------------------------------------------
"  Fundamental Envionment
" ---------------------------------------------------------------------------


" ---------------------------------------------------------------------------
"  GIT Manager: Fugitive
" ---------------------------------------------------------------------------
Bundle 'tpope/vim-fugitive'


" ---------------------------------------------------------------------------
"  File Manager: NERDTree + Ctrlp
" ---------------------------------------------------------------------------
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
map <C-o>   <plug>NERDTreeTabsToggle<CR>
let NERDTreeShowBookmarks = 1
let NERDTreeIgnore=['\.DS_Store', '\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
nnoremap <Leader>nt     :call ToggleNERDTreeAndTagbar()<CR>
" Let Ctrlp work with NERDTree
let g:NERDTreeChDirMode       = 2
let g:ctrlp_working_path_mode = 'rw'


" ---------------------------------------------------------------------------
"  Comment Helper: NERDCommentor
" ---------------------------------------------------------------------------
Bundle 'scrooloose/nerdcommenter'


" ---------------------------------------------------------------------------
"  Status: Status Line Enhancement
" ---------------------------------------------------------------------------
Bundle 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'


" ---------------------------------------------------------------------------
"  Tags: Source Code Tags
" ---------------------------------------------------------------------------
Bundle 'majutsushi/tagbar'
let g:tagbar_ctags_bin='/usr/local/bin/ctags'
let g:tagbar_width=30
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx,*.go call tagbar#autoopen()
nnoremap <silent> <Leader>tt :TagbarToggle<CR>
" If using go please install the gotags program using the following
" go install github.com/jstemmer/gotags
" And make sure gotags is in your path
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
        \ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
        \ 'r:constructor', 'f:functions' ],
    \ 'sro' : '.',
    \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
    \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }


" ---------------------------------------------------------------------------
"  Languages: Golang Supports
" ---------------------------------------------------------------------------
Bundle 'fatih/vim-go'
let g:go_fmt_command = "goimports"


" ---------------------------------------------------------------------------
"  Syntax: Static Syntax Checking
" ---------------------------------------------------------------------------
"Bundle 'scrooloose/syntastic'
"map <Leader>sc  <Plug>(SyntasticCheck)


" ---------------------------------------------------------------------------
"  Editing: Pairing + Multiple Curosr (like Sublime)
" ---------------------------------------------------------------------------
Bundle 'jiangmiao/auto-pairs'
Bundle 'terryma/vim-multiple-cursors'


" ---------------------------------------------------------------------------
"  Authocomplete: Autocomplete & Code Snippets
" ---------------------------------------------------------------------------
Bundle 'Shougo/neocomplete'
" Disable preview buffer at the bottom
set completeopt-=preview
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'"
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" ---------------------------------------------------------------------------
Bundle 'Shougo/neosnippet.vim'
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='$HOME/.vim/snippets'
" Bundle key-mappings.
imap <C-\>     <Plug>(neosnippet_expand_or_jump)
smap <C-\>     <Plug>(neosnippet_expand_or_jump)
xmap <C-\>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" ---------------------------------------------------------------------------


" ---------------------------------------------------------------------------
"  Templates: File Templates
" ---------------------------------------------------------------------------
Bundle 'aperezdc/vim-template'
let g:template_dir = expand('~/.vim/templates')


" ---------------------------------------------------------------------------
"  Themes: Color Themes
" ---------------------------------------------------------------------------
Bundle 'tomasr/molokai'


" ***************************************************************************
"  Functions: Bundle Helpers
" ***************************************************************************
function! ToggleNERDTreeAndTagbar()
    let w:jumpbacktohere = 1

    " Detect which plugins are open
    if exists('t:NERDTreeBufName')
        let nerdtree_open = bufwinnr(t:NERDTreeBufName) != -1
    else
        let nerdtree_open = 0
    endif
    let tagbar_open = bufwinnr('__Tagbar__') != -1

    " Perform the appropriate action
    if nerdtree_open && tagbar_open
        NERDTreeClose
        TagbarClose
    elseif nerdtree_open
        TagbarOpen
    elseif tagbar_open
        NERDTree
    else
        NERDTree
        TagbarOpen
    endif

    " Jump back to the original window
    for window in range(1, winnr('$'))
        execute window . 'wincmd w'
        if exists('w:jumpbacktohere')
            unlet w:jumpbacktohere
            break
        endif
    endfor
endfunction
