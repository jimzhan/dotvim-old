"  ------------------------------------------------------------
" *  @file       vimrc.bundles
" *  @date       2014
" *  @author     Jim Zhan <jim.zhan@me.com>
" *
" Copyright Â© 2014 Jim Zhan.
" ------------------------------------------------------------
" Licensed under the Apache License, Version 2.0 (the "License");
" you may not use this file except in compliance with the License.
" You may obtain a copy of the License at
"
"     http://www.apache.org/licenses/LICENSE-2.0
"
" Unless required by applicable law or agreed to in writing, software
" distributed under the License is distributed on an "AS IS" BASIS,
" WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
" See the License for the specific language governing permissions and
" limitations under the License.
" ------------------------------------------------------------

" ---------------------------------------------------------------------------
"  Fugitive for GIT
" ---------------------------------------------------------------------------
Plugin 'tpope/vim-fugitive'


" ---------------------------------------------------------------------------
"  NERDTree
" ---------------------------------------------------------------------------
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
map <C-o>   <plug>NERDTreeTabsToggle<CR>
let NERDTreeShowBookmarks = 1
let NERDTreeIgnore=['\.DS_Store', '\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
nnoremap <Leader>nt     :call ToggleNERDTreeAndTagbar()<CR>


" ---------------------------------------------------------------------------
"  NERDCommentor
" ---------------------------------------------------------------------------
Plugin 'scrooloose/nerdcommenter'


" ---------------------------------------------------------------------------
"  Ctrl-P Files Finder
" ---------------------------------------------------------------------------
Plugin 'kien/ctrlp.vim'


" ---------------------------------------------------------------------------
"  Status Line Enhancement
" ---------------------------------------------------------------------------
Plugin 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1


" ---------------------------------------------------------------------------
"  Source Code Tags
" ---------------------------------------------------------------------------
Plugin 'majutsushi/tagbar'
let g:tagbar_ctags_bin='/usr/local/bin/ctags'
let g:tagbar_width=30
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx,*.go call tagbar#autoopen()
nnoremap <silent> <Leader>tt :TagbarToggle<CR>
" If using go please install the gotags program using the following
" go install github.com/jstemmer/gotags
" And make sure gotags is in your path
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
        \ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
        \ 'r:constructor', 'f:functions' ],
    \ 'sro' : '.',
    \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
    \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }


" ---------------------------------------------------------------------------
"  Golang Supports
" ---------------------------------------------------------------------------
Plugin 'fatih/vim-go'
let g:go_fmt_command = "goimports"
" Go related mappings
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>go <Plug>(go-run)
au FileType go nmap <Leader>gb <Plug>(go-build)
au FileType go nmap <Leader>gt <Plug>(go-test)
au FileType go nmap gd         <Plug>(go-def-tab)

" ---------------------------------------------------------------------------
"  Static Syntax Checking
" ---------------------------------------------------------------------------
Plugin 'scrooloose/syntastic'
"map <Leader>sc  <Plug>(SyntasticCheck)

" ---------------------------------------------------------------------------
"  Editing/Autocomplete Supports
" ---------------------------------------------------------------------------
Plugin 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "context"

Plugin 'jiangmiao/auto-pairs'


" ---------------------------------------------------------------------------
"  Color Themes
" ---------------------------------------------------------------------------
Plugin 'tomasr/molokai'


" ---------------------------------------------------------------------------
"  Plugin Helpers
" ---------------------------------------------------------------------------
function! ToggleNERDTreeAndTagbar()
    let w:jumpbacktohere = 1

    " Detect which plugins are open
    if exists('t:NERDTreeBufName')
        let nerdtree_open = bufwinnr(t:NERDTreeBufName) != -1
    else
        let nerdtree_open = 0
    endif
    let tagbar_open = bufwinnr('__Tagbar__') != -1

    " Perform the appropriate action
    if nerdtree_open && tagbar_open
        NERDTreeClose
        TagbarClose
    elseif nerdtree_open
        TagbarOpen
    elseif tagbar_open
        NERDTree
    else
        NERDTree
        TagbarOpen
    endif

    " Jump back to the original window
    for window in range(1, winnr('$'))
        execute window . 'wincmd w'
        if exists('w:jumpbacktohere')
            unlet w:jumpbacktohere
            break
        endif
    endfor
endfunction
